import mysql from "mysql2/promise";  // üîπ Conexi√≥n a MySQL
import bcrypt from "bcrypt";      

export const loginController = {
  async processLogin(req) {
    try {
      const body = await req.json();
      const { usuario, password } = body;

      // 1Ô∏è‚É£ Validar que los campos no est√©n vac√≠os
      if (!usuario || !password) {
        return new Response(
          JSON.stringify({ error: "Debes diligenciar todos los campos" }),
          { status: 400, headers: { "Content-Type": "application/json" } }
        );
      }

      // 2Ô∏è‚É£ Conectarse a la base de datos
      //    üîπ Cambia los valores seg√∫n tu configuraci√≥n local
      const connection = await mysql.createConnection({
        host: "localhost",   // üîπ Cambia si usas otro servidor (por ej. "127.0.0.1" o una URL remota)
        user: "root",        // üîπ Cambia por tu usuario de MySQL
        password: "",        // üîπ Cambia por tu contrase√±a
        database: "tickets", // üîπ Cambia por el nombre de tu base de datos (por ej. "miApp", "usuariosDB", etc.)
      });

      // 3Ô∏è‚É£ Buscar al usuario en la base de datos
      //    üîπ Cambia 'usuarios' por el nombre de tu tabla
      //    üîπ Cambia 'usuario' por la columna donde guardas el nombre o correo
      const [rows] = await connection.execute(
        "SELECT * FROM usuarios WHERE usuario = ?",
        [usuario]
      );

      // 4Ô∏è‚É£ Si no se encuentra ning√∫n usuario, devuelve error
      if (rows.length === 0) {
        await connection.end();
        return new Response(
          JSON.stringify({ error: "Usuario o contrase√±a incorrectos" }),
          { status: 400, headers: { "Content-Type": "application/json" } }
        );
      }

      // 5Ô∏è‚É£ Comparar la contrase√±a escrita con la guardada (encriptada)
      //    üîπ Cambia 'password' por el nombre real de la columna donde guardas la contrase√±a encriptada
      const user = rows[0];
      const match = await bcrypt.compare(password, user.password);

      if (!match) {
        await connection.end();
        return new Response(
          JSON.stringify({ error: "Usuario o contrase√±a incorrectos" }),
          { status: 400, headers: { "Content-Type": "application/json" } }
        );
      }

      // 6Ô∏è‚É£ Cerrar conexi√≥n despu√©s de usarla
      await connection.end();

      // 7Ô∏è‚É£ Si todo est√° bien, enviar respuesta exitosa
      return new Response(
        JSON.stringify({ mensaje: "Bienvenido, inicio de sesi√≥n exitoso" }),
        { status: 200, headers: { "Content-Type": "application/json" } }
      );

    } catch (error) {
      console.error("Error en login:", error);
      return new Response(
        JSON.stringify({ error: "Error interno del servidor" }),
        { status: 500, headers: { "Content-Type": "application/json" } }
      );
    }
  }
};
